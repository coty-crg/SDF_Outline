#pragma kernel ClearMask
#pragma kernel ClearSDF
#pragma kernel Initialize
#pragma kernel Step
#pragma kernel SubtractMask

// R8 
Texture2D<float> MaskInput; 
RWTexture2D<float> MaskOutput; 

// RGBA_Float
// xy = uv of surface, z = distance from surface, w = confidence (alpha) 
RWTexture2D<float4> SDFInput; 
RWTexture2D<float4> SDFOutput;

uniform int texture_width;
uniform int texture_height;
uniform int maximum_outline_width;

[numthreads(8,8,1)]
void ClearMask(int3 id : SV_DispatchThreadID)
{
    MaskOutput[id.xy] = 0.0;
}

[numthreads(8, 8, 1)]
void ClearSDF(int3 id : SV_DispatchThreadID)
{
    SDFOutput[id.xy] = float4(0.0, 0.0, 0.0, -1.0);
}

[numthreads(8, 8, 1)]
void Initialize(int3 id : SV_DispatchThreadID)
{
    bool inside  = false;
    bool outside = false;

    for (int x = -1; x <= 1; ++x)
    {
        for (int y = -1; y <= 1; ++y)
        {
            float input = MaskInput[id.xy + int2(x, y)];

            if (input > 0)
            {
                inside = true;
            }
            else 
            {
                outside = true; 
            }
        }
    }

    bool is_edge = inside && outside; 

    float uv_x = (float) id.x / texture_width;
    float uv_y = (float) id.y / texture_height;

    SDFOutput[id.xy] = float4(uv_x, uv_y, is_edge ? 0.0 : -1.0, 0.0);
}

[numthreads(8, 8, 1)]
void Step(int3 id : SV_DispatchThreadID)
{
    // bounds checks 
    if (id.x <= 2 || id.y <= 2 || id.x >= texture_width - 2 || id.y >= texture_height - 2)
    {
        SDFOutput[id.xy] = float4(0, 0, -1, 0);
        return;
    }

    float4 smallest_result = float4(0, 0, -1, 0);
    float smallest_distance = 1000;

    float uv_x = (float) id.x / texture_width;
    float uv_y = (float) id.y / texture_height;
    float2 uv = float2(uv_x, uv_y);

    for (int x = -1; x <= 1; ++x)
    {
        for (int y = -1; y <= 1; ++y)
        {
            float4 result = SDFInput[id.xy + int2(x, y)];
            float result_distance = result.z;

            if (result_distance >= 0)
            {
                float2 result_uv = result.xy;
                float2 to_result = result_uv - uv;
                float to_distance = length(to_result); 

                if (to_distance < smallest_distance)
                {
                    smallest_distance = to_distance;
                    smallest_result = result;
                }
            }
        }
    }

    // did not find any surfaces
    if (smallest_distance == 1000.0)
    {
        SDFOutput[id.xy] = smallest_result;
    }
    // found a surface or a pointer to surfacce
    else 
    {
        float4 result = smallest_result;
        result.z = smallest_distance;
        result.w = 1.0 - smallest_distance * texture_width / maximum_outline_width;
        SDFOutput[id.xy] = result;
    }
}

[numthreads(8, 8, 1)]
void SubtractMask(int3 id : SV_DispatchThreadID)
{
    float input_mask = MaskInput[id.xy];
    float4 input_sdf = SDFInput[id.xy];

    if (input_mask > 0)
    {
        // input_sdf.w = saturate(pow(saturate(input_sdf.w), 1000));
        SDFOutput[id.xy] = float4(input_sdf.xy, -input_sdf.z, input_sdf.w);
    }
    else 
    {
        // input_sdf.w = saturate(pow(saturate(input_sdf.w), 2) * 100);
        SDFOutput[id.xy] = input_sdf;
    }
}